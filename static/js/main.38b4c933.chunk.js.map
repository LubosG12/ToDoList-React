{"version":3,"sources":["components/ToDoInput.js","components/ToDoItem.js","components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDoInput","this","props","item","handleChange","handleSubmit","editItem","className","onSubmit","type","placeholder","value","onChange","Component","ToDoItem","title","handleDelete","handleEdit","onClick","ToDoList","items","clearList","isEmpty","map","key","id","App","state","uuid","e","setState","target","filteredItems","filter","length","selectedItem","find","preventDefault","newItem","updatedItems","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38b4c933.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class ToDoInput extends Component {\r\n  render() {\r\n    const { item, handleChange, handleSubmit, editItem} = this.props;\r\n    return (\r\n      <div className=\"card card-body my-3\">\r\n      <form onSubmit={handleSubmit}>\r\n      <div className=\"input-group\">\r\n        <div className=\"input-group-prepend\">\r\n          <div className={editItem ? \"input-group-text bg-success text-white\" : \"input-group-text bg-primary text-white\"}>\r\n            <i className=\"fas fa-book\"> </i>\r\n          </div>\r\n        </div>\r\n        <input type=\"text\" className=\"form-control\" placeholder=\"Add an item...\" value={item} onChange={handleChange}/>\r\n      </div>\r\n      <button type=\"submit\" className={editItem ? \"btn btn-block btn-success mt-3\" : \"btn btn-block btn-primary mt-3\"}>{editItem ? 'Edit item' : 'Add item'}</button>\r\n      </form>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class ToDoItem extends Component {\r\n  render() {\r\n    const { title, handleDelete, handleEdit} = this.props;\r\n    return (\r\n      <li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\r\n      <h6>{title}</h6>\r\n      <div className=\"todo-icon\">\r\n        <span className=\"mx-2 text-success\" onClick={handleEdit}>\r\n        <i className=\"fas fa-pen\"></i></span>\r\n        <span className=\"mx-2 text-danger\" onClick={handleDelete}>\r\n        <i className=\"fas fa-trash\"></i></span>\r\n      </div>\r\n      </li>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport ToDoItem from './ToDoItem';\r\n\r\nexport default class ToDoList extends Component {\r\n  render() {\r\n    const { items, clearList, handleDelete, handleEdit, isEmpty } = this.props;\r\n    return (\r\n      <ul className=\"list-group my-5\">\r\n      <h3 className=\"text-capitalize text-center\">my todo list</h3>\r\n\r\n      {items.map(item => {\r\n          return(\r\n            <ToDoItem key={item.id} title={item.title} handleDelete={() => handleDelete(item.id)} handleEdit={() => handleEdit(item.id)}/>)\r\n        })\r\n      }\r\n\r\n\r\n      {isEmpty ? null : <button onClick={clearList} type=\"button\" className=\"btn btn-danger btn-block text-capitalize mt-5\">Clear List</button>}\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport ToDoInput from './components/ToDoInput';\nimport ToDoList from './components/ToDoList';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport uuid from 'uuid';\n\nclass App extends Component {\n\n  state= {\n    items:[],\n    id: uuid(),\n    item: '',\n    editItem: false,\n    isEmpty: true\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      item:e.target.value\n    });\n  };\n\n  clearList = () => {\n    this.setState({\n      items:[]\n    });\n  };\n\n  handleDelete = (id) => {\n    const filteredItems = this.state.items.filter(item => item.id!== id)\n    this.setState({\n      items: filteredItems,\n    });\n    if (filteredItems.length==0){\n      this.setState({\n        isEmpty: true\n      })\n    }\n  };\n\n  handleEdit = (id) => {\n    const filteredItems = this.state.items.filter(item => item.id!== id)\n    const selectedItem = this.state.items.find(item => item.id === id)\n    this.setState({\n      items: filteredItems,\n      item: selectedItem.title,\n      editItem: true,\n      id: id\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (this.state.item!==''){\n      const newItem = {\n        id: this.state.id,\n        title: this.state.item,\n      }\n      const updatedItems =[...this.state.items, newItem];\n      this.setState({\n        item:'',\n        items: updatedItems,\n        id: uuid(),\n        editItem: false,\n        isEmpty: false\n      })\n    }\n  }\n\n  render() {\n    return(\n      <div className=\"container bg-light rounded border border-secondary mt-5\">\n        <div className=\"row\">\n          <div className=\"col-10 mx-auto col-md-8 mt-4\">\n          <h3 className=\"text-capitalize text-center\">Item Input</h3>\n          <ToDoInput item={this.state.item} handleChange={this.handleChange} handleSubmit={this.handleSubmit} editItem={this.state.editItem}/>\n          <ToDoList items={this.state.items} clearList={this.clearList} handleDelete={this.handleDelete}  handleEdit={this.handleEdit} isEmpty={this.state.isEmpty}/>\n          </div>\n        </div>\n      </div>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}